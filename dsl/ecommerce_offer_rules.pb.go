// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: ecommerce_offer_rules.proto

package dsl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the types for the fields accepted in the input and
// output of the GRules. We are supporting primitive field types only.
type FieldType int32

const (
	FieldType_FIELD_TYPE_UNSPECIFIED FieldType = 0
	FieldType_STRING                 FieldType = 1
	FieldType_BOOL                   FieldType = 2
	FieldType_INTEGER                FieldType = 3
	FieldType_LONG                   FieldType = 4
	FieldType_FLOAT                  FieldType = 5
	FieldType_DOUBLE                 FieldType = 6
	FieldType_STRING_LIST            FieldType = 7
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "FIELD_TYPE_UNSPECIFIED",
		1: "STRING",
		2: "BOOL",
		3: "INTEGER",
		4: "LONG",
		5: "FLOAT",
		6: "DOUBLE",
		7: "STRING_LIST",
	}
	FieldType_value = map[string]int32{
		"FIELD_TYPE_UNSPECIFIED": 0,
		"STRING":                 1,
		"BOOL":                   2,
		"INTEGER":                3,
		"LONG":                   4,
		"FLOAT":                  5,
		"DOUBLE":                 6,
		"STRING_LIST":            7,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_ecommerce_offer_rules_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_ecommerce_offer_rules_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{0}
}

// Represents the types for the values accepted as values in the conditions
// to be tested for the various conditions.
type ValueType int32

const (
	ValueType_VALUE_TYPE_UNSPECIFIED ValueType = 0
	ValueType_STRING_VAL             ValueType = 1
	ValueType_BOOL_VAL               ValueType = 2
	ValueType_INTEGER_VAL            ValueType = 3
	ValueType_LONG_VAL               ValueType = 4
	ValueType_FLOAT_VAL              ValueType = 5
	ValueType_DOUBLE_VAL             ValueType = 6
	ValueType_STRING_LIST_VAL        ValueType = 7
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "STRING_VAL",
		2: "BOOL_VAL",
		3: "INTEGER_VAL",
		4: "LONG_VAL",
		5: "FLOAT_VAL",
		6: "DOUBLE_VAL",
		7: "STRING_LIST_VAL",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED": 0,
		"STRING_VAL":             1,
		"BOOL_VAL":               2,
		"INTEGER_VAL":            3,
		"LONG_VAL":               4,
		"FLOAT_VAL":              5,
		"DOUBLE_VAL":             6,
		"STRING_LIST_VAL":        7,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_ecommerce_offer_rules_proto_enumTypes[1].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_ecommerce_offer_rules_proto_enumTypes[1]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1}
}

// Operators used in the GRule expressions.
type GRuleExpressionOperator int32

const (
	GRuleExpressionOperator_EXPRESSION_OPERATOR_UNSPECIFIED GRuleExpressionOperator = 0
	GRuleExpressionOperator_LESS_THAN                       GRuleExpressionOperator = 1
	GRuleExpressionOperator_LESS_THAN_EQUALS                GRuleExpressionOperator = 2
	GRuleExpressionOperator_GREATER_THAN                    GRuleExpressionOperator = 3
	GRuleExpressionOperator_GREATER_THAN_EQUALS             GRuleExpressionOperator = 4
	GRuleExpressionOperator_EQUALS                          GRuleExpressionOperator = 5
	GRuleExpressionOperator_NOT_EQUALS                      GRuleExpressionOperator = 6
	GRuleExpressionOperator_HAS_CATEGORY_FUNCTION           GRuleExpressionOperator = 7 // Refer: https://github.com/hyperjumptech/grule-rule-engine/blob/master/docs/en/Function_en.md#stringinstring--bool
)

// Enum value maps for GRuleExpressionOperator.
var (
	GRuleExpressionOperator_name = map[int32]string{
		0: "EXPRESSION_OPERATOR_UNSPECIFIED",
		1: "LESS_THAN",
		2: "LESS_THAN_EQUALS",
		3: "GREATER_THAN",
		4: "GREATER_THAN_EQUALS",
		5: "EQUALS",
		6: "NOT_EQUALS",
		7: "HAS_CATEGORY_FUNCTION",
	}
	GRuleExpressionOperator_value = map[string]int32{
		"EXPRESSION_OPERATOR_UNSPECIFIED": 0,
		"LESS_THAN":                       1,
		"LESS_THAN_EQUALS":                2,
		"GREATER_THAN":                    3,
		"GREATER_THAN_EQUALS":             4,
		"EQUALS":                          5,
		"NOT_EQUALS":                      6,
		"HAS_CATEGORY_FUNCTION":           7,
	}
)

func (x GRuleExpressionOperator) Enum() *GRuleExpressionOperator {
	p := new(GRuleExpressionOperator)
	*p = x
	return p
}

func (x GRuleExpressionOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GRuleExpressionOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_ecommerce_offer_rules_proto_enumTypes[2].Descriptor()
}

func (GRuleExpressionOperator) Type() protoreflect.EnumType {
	return &file_ecommerce_offer_rules_proto_enumTypes[2]
}

func (x GRuleExpressionOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GRuleExpressionOperator.Descriptor instead.
func (GRuleExpressionOperator) EnumDescriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{2}
}

// Operators used in the GRule conditions and expressions
// to join multiple conditions or expressions.
type GRuleJoinOperator int32

const (
	GRuleJoinOperator_JOIN_OPERATOR_UNSPECIFIED GRuleJoinOperator = 0
	GRuleJoinOperator_AND                       GRuleJoinOperator = 1
	GRuleJoinOperator_OR                        GRuleJoinOperator = 2
)

// Enum value maps for GRuleJoinOperator.
var (
	GRuleJoinOperator_name = map[int32]string{
		0: "JOIN_OPERATOR_UNSPECIFIED",
		1: "AND",
		2: "OR",
	}
	GRuleJoinOperator_value = map[string]int32{
		"JOIN_OPERATOR_UNSPECIFIED": 0,
		"AND":                       1,
		"OR":                        2,
	}
)

func (x GRuleJoinOperator) Enum() *GRuleJoinOperator {
	p := new(GRuleJoinOperator)
	*p = x
	return p
}

func (x GRuleJoinOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GRuleJoinOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_ecommerce_offer_rules_proto_enumTypes[3].Descriptor()
}

func (GRuleJoinOperator) Type() protoreflect.EnumType {
	return &file_ecommerce_offer_rules_proto_enumTypes[3]
}

func (x GRuleJoinOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GRuleJoinOperator.Descriptor instead.
func (GRuleJoinOperator) EnumDescriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{3}
}

// Represents the input field to be tested.
type EcommerceOfferRule_Condition_InputField int32

const (
	EcommerceOfferRule_Condition_AGE                         EcommerceOfferRule_Condition_InputField = 0
	EcommerceOfferRule_Condition_GENDER                      EcommerceOfferRule_Condition_InputField = 1
	EcommerceOfferRule_Condition_LOCATION                    EcommerceOfferRule_Condition_InputField = 2
	EcommerceOfferRule_Condition_DEVICE_TYPE                 EcommerceOfferRule_Condition_InputField = 3
	EcommerceOfferRule_Condition_IS_LOYALTY_PROGRAM_MEMBER   EcommerceOfferRule_Condition_InputField = 4
	EcommerceOfferRule_Condition_TOTAL_LIFETIME_SPENT        EcommerceOfferRule_Condition_InputField = 5
	EcommerceOfferRule_Condition_AVG_ORDER_VALUE             EcommerceOfferRule_Condition_InputField = 6
	EcommerceOfferRule_Condition_LAST_PURCHASE_DAYS_AGO      EcommerceOfferRule_Condition_InputField = 7
	EcommerceOfferRule_Condition_LAST_CATEGORY_PURCHASED     EcommerceOfferRule_Condition_InputField = 8
	EcommerceOfferRule_Condition_PREFERRED_CATEGORIES        EcommerceOfferRule_Condition_InputField = 9
	EcommerceOfferRule_Condition_CART_TOTAL                  EcommerceOfferRule_Condition_InputField = 10
	EcommerceOfferRule_Condition_CART_CONTAINS_CATEGORIES    EcommerceOfferRule_Condition_InputField = 11
	EcommerceOfferRule_Condition_BROWSING_CATEGORIES         EcommerceOfferRule_Condition_InputField = 12
	EcommerceOfferRule_Condition_PURCHASE_COUNT_LAST_30_DAYS EcommerceOfferRule_Condition_InputField = 13
	EcommerceOfferRule_Condition_RETURN_RATE_PERCENT         EcommerceOfferRule_Condition_InputField = 14
	EcommerceOfferRule_Condition_HAS_COUPON_REDEEMED_BEFORE  EcommerceOfferRule_Condition_InputField = 15
	EcommerceOfferRule_Condition_SIGNUP_DAYS_AGO             EcommerceOfferRule_Condition_InputField = 16
)

// Enum value maps for EcommerceOfferRule_Condition_InputField.
var (
	EcommerceOfferRule_Condition_InputField_name = map[int32]string{
		0:  "AGE",
		1:  "GENDER",
		2:  "LOCATION",
		3:  "DEVICE_TYPE",
		4:  "IS_LOYALTY_PROGRAM_MEMBER",
		5:  "TOTAL_LIFETIME_SPENT",
		6:  "AVG_ORDER_VALUE",
		7:  "LAST_PURCHASE_DAYS_AGO",
		8:  "LAST_CATEGORY_PURCHASED",
		9:  "PREFERRED_CATEGORIES",
		10: "CART_TOTAL",
		11: "CART_CONTAINS_CATEGORIES",
		12: "BROWSING_CATEGORIES",
		13: "PURCHASE_COUNT_LAST_30_DAYS",
		14: "RETURN_RATE_PERCENT",
		15: "HAS_COUPON_REDEEMED_BEFORE",
		16: "SIGNUP_DAYS_AGO",
	}
	EcommerceOfferRule_Condition_InputField_value = map[string]int32{
		"AGE":                         0,
		"GENDER":                      1,
		"LOCATION":                    2,
		"DEVICE_TYPE":                 3,
		"IS_LOYALTY_PROGRAM_MEMBER":   4,
		"TOTAL_LIFETIME_SPENT":        5,
		"AVG_ORDER_VALUE":             6,
		"LAST_PURCHASE_DAYS_AGO":      7,
		"LAST_CATEGORY_PURCHASED":     8,
		"PREFERRED_CATEGORIES":        9,
		"CART_TOTAL":                  10,
		"CART_CONTAINS_CATEGORIES":    11,
		"BROWSING_CATEGORIES":         12,
		"PURCHASE_COUNT_LAST_30_DAYS": 13,
		"RETURN_RATE_PERCENT":         14,
		"HAS_COUPON_REDEEMED_BEFORE":  15,
		"SIGNUP_DAYS_AGO":             16,
	}
)

func (x EcommerceOfferRule_Condition_InputField) Enum() *EcommerceOfferRule_Condition_InputField {
	p := new(EcommerceOfferRule_Condition_InputField)
	*p = x
	return p
}

func (x EcommerceOfferRule_Condition_InputField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcommerceOfferRule_Condition_InputField) Descriptor() protoreflect.EnumDescriptor {
	return file_ecommerce_offer_rules_proto_enumTypes[4].Descriptor()
}

func (EcommerceOfferRule_Condition_InputField) Type() protoreflect.EnumType {
	return &file_ecommerce_offer_rules_proto_enumTypes[4]
}

func (x EcommerceOfferRule_Condition_InputField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcommerceOfferRule_Condition_InputField.Descriptor instead.
func (EcommerceOfferRule_Condition_InputField) EnumDescriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1, 0, 0}
}

type EcommerceOfferRule_Action_OutputField int32

const (
	EcommerceOfferRule_Action_APPLY_DISCOUNT_PERCENT EcommerceOfferRule_Action_OutputField = 0
	EcommerceOfferRule_Action_APPLY_FLAT_DISCOUNT    EcommerceOfferRule_Action_OutputField = 1
	EcommerceOfferRule_Action_SHOW_PROMOTION_ID      EcommerceOfferRule_Action_OutputField = 2
	EcommerceOfferRule_Action_FREE_SHIPPING          EcommerceOfferRule_Action_OutputField = 3
	EcommerceOfferRule_Action_ASSIGN_COUPON_CODE     EcommerceOfferRule_Action_OutputField = 4
	EcommerceOfferRule_Action_PROMO_MESSAGE          EcommerceOfferRule_Action_OutputField = 5
	EcommerceOfferRule_Action_ADD_LOYALTY_POINTS     EcommerceOfferRule_Action_OutputField = 6
)

// Enum value maps for EcommerceOfferRule_Action_OutputField.
var (
	EcommerceOfferRule_Action_OutputField_name = map[int32]string{
		0: "APPLY_DISCOUNT_PERCENT",
		1: "APPLY_FLAT_DISCOUNT",
		2: "SHOW_PROMOTION_ID",
		3: "FREE_SHIPPING",
		4: "ASSIGN_COUPON_CODE",
		5: "PROMO_MESSAGE",
		6: "ADD_LOYALTY_POINTS",
	}
	EcommerceOfferRule_Action_OutputField_value = map[string]int32{
		"APPLY_DISCOUNT_PERCENT": 0,
		"APPLY_FLAT_DISCOUNT":    1,
		"SHOW_PROMOTION_ID":      2,
		"FREE_SHIPPING":          3,
		"ASSIGN_COUPON_CODE":     4,
		"PROMO_MESSAGE":          5,
		"ADD_LOYALTY_POINTS":     6,
	}
)

func (x EcommerceOfferRule_Action_OutputField) Enum() *EcommerceOfferRule_Action_OutputField {
	p := new(EcommerceOfferRule_Action_OutputField)
	*p = x
	return p
}

func (x EcommerceOfferRule_Action_OutputField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcommerceOfferRule_Action_OutputField) Descriptor() protoreflect.EnumDescriptor {
	return file_ecommerce_offer_rules_proto_enumTypes[5].Descriptor()
}

func (EcommerceOfferRule_Action_OutputField) Type() protoreflect.EnumType {
	return &file_ecommerce_offer_rules_proto_enumTypes[5]
}

func (x EcommerceOfferRule_Action_OutputField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcommerceOfferRule_Action_OutputField.Descriptor instead.
func (EcommerceOfferRule_Action_OutputField) EnumDescriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1, 1, 0}
}

type RuleValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*RuleValue_StringVal
	//	*RuleValue_BoolVal
	//	*RuleValue_IntVal
	//	*RuleValue_FloatVal
	//	*RuleValue_StringListCommaConcatenated
	Value         isRuleValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleValue) Reset() {
	*x = RuleValue{}
	mi := &file_ecommerce_offer_rules_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleValue) ProtoMessage() {}

func (x *RuleValue) ProtoReflect() protoreflect.Message {
	mi := &file_ecommerce_offer_rules_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleValue.ProtoReflect.Descriptor instead.
func (*RuleValue) Descriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{0}
}

func (x *RuleValue) GetValue() isRuleValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RuleValue) GetStringVal() string {
	if x != nil {
		if x, ok := x.Value.(*RuleValue_StringVal); ok {
			return x.StringVal
		}
	}
	return ""
}

func (x *RuleValue) GetBoolVal() bool {
	if x != nil {
		if x, ok := x.Value.(*RuleValue_BoolVal); ok {
			return x.BoolVal
		}
	}
	return false
}

func (x *RuleValue) GetIntVal() int32 {
	if x != nil {
		if x, ok := x.Value.(*RuleValue_IntVal); ok {
			return x.IntVal
		}
	}
	return 0
}

func (x *RuleValue) GetFloatVal() float32 {
	if x != nil {
		if x, ok := x.Value.(*RuleValue_FloatVal); ok {
			return x.FloatVal
		}
	}
	return 0
}

func (x *RuleValue) GetStringListCommaConcatenated() string {
	if x != nil {
		if x, ok := x.Value.(*RuleValue_StringListCommaConcatenated); ok {
			return x.StringListCommaConcatenated
		}
	}
	return ""
}

type isRuleValue_Value interface {
	isRuleValue_Value()
}

type RuleValue_StringVal struct {
	StringVal string `protobuf:"bytes,1,opt,name=string_val,json=stringVal,proto3,oneof"`
}

type RuleValue_BoolVal struct {
	BoolVal bool `protobuf:"varint,2,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type RuleValue_IntVal struct {
	IntVal int32 `protobuf:"varint,3,opt,name=int_val,json=intVal,proto3,oneof"`
}

type RuleValue_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,4,opt,name=float_val,json=floatVal,proto3,oneof"`
}

type RuleValue_StringListCommaConcatenated struct {
	StringListCommaConcatenated string `protobuf:"bytes,5,opt,name=string_list_comma_concatenated,json=stringListCommaConcatenated,proto3,oneof"`
}

func (*RuleValue_StringVal) isRuleValue_Value() {}

func (*RuleValue_BoolVal) isRuleValue_Value() {}

func (*RuleValue_IntVal) isRuleValue_Value() {}

func (*RuleValue_FloatVal) isRuleValue_Value() {}

func (*RuleValue_StringListCommaConcatenated) isRuleValue_Value() {}

// Ecommerce offer rule.
type EcommerceOfferRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the rule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the rule.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Salience of the rule used in GRule.
	Salience uint32 `protobuf:"varint,3,opt,name=salience,proto3" json:"salience,omitempty"`
	// Represents the operator to join multiple conditions.
	Conditions []*EcommerceOfferRule_Condition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Represents the operator to join multiple conditions.
	ConditionJoinOperator GRuleJoinOperator `protobuf:"varint,5,opt,name=condition_join_operator,json=conditionJoinOperator,proto3,enum=ecommerce.v1.rules.GRuleJoinOperator" json:"condition_join_operator,omitempty"`
	// Represents the actions to be performed.
	Actions       []*EcommerceOfferRule_Action `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcommerceOfferRule) Reset() {
	*x = EcommerceOfferRule{}
	mi := &file_ecommerce_offer_rules_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcommerceOfferRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcommerceOfferRule) ProtoMessage() {}

func (x *EcommerceOfferRule) ProtoReflect() protoreflect.Message {
	mi := &file_ecommerce_offer_rules_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcommerceOfferRule.ProtoReflect.Descriptor instead.
func (*EcommerceOfferRule) Descriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1}
}

func (x *EcommerceOfferRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EcommerceOfferRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EcommerceOfferRule) GetSalience() uint32 {
	if x != nil {
		return x.Salience
	}
	return 0
}

func (x *EcommerceOfferRule) GetConditions() []*EcommerceOfferRule_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EcommerceOfferRule) GetConditionJoinOperator() GRuleJoinOperator {
	if x != nil {
		return x.ConditionJoinOperator
	}
	return GRuleJoinOperator_JOIN_OPERATOR_UNSPECIFIED
}

func (x *EcommerceOfferRule) GetActions() []*EcommerceOfferRule_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Conditions to be tested for the rule.
type EcommerceOfferRule_Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the conditions to be tested.
	Expressions []*EcommerceOfferRule_Condition_Expression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
	// Represents the operator to join multiple expressions.
	ExpressionJoinOperator GRuleJoinOperator `protobuf:"varint,2,opt,name=expression_join_operator,json=expressionJoinOperator,proto3,enum=ecommerce.v1.rules.GRuleJoinOperator" json:"expression_join_operator,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *EcommerceOfferRule_Condition) Reset() {
	*x = EcommerceOfferRule_Condition{}
	mi := &file_ecommerce_offer_rules_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcommerceOfferRule_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcommerceOfferRule_Condition) ProtoMessage() {}

func (x *EcommerceOfferRule_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_ecommerce_offer_rules_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcommerceOfferRule_Condition.ProtoReflect.Descriptor instead.
func (*EcommerceOfferRule_Condition) Descriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EcommerceOfferRule_Condition) GetExpressions() []*EcommerceOfferRule_Condition_Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *EcommerceOfferRule_Condition) GetExpressionJoinOperator() GRuleJoinOperator {
	if x != nil {
		return x.ExpressionJoinOperator
	}
	return GRuleJoinOperator_JOIN_OPERATOR_UNSPECIFIED
}

// Actions to be performed if the conditions are met.
type EcommerceOfferRule_Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the action to be performed.
	Output EcommerceOfferRule_Action_OutputField `protobuf:"varint,1,opt,name=output,proto3,enum=ecommerce.v1.rules.EcommerceOfferRule_Action_OutputField" json:"output,omitempty"`
	// Represents the value to be set for the action.
	Value         *RuleValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcommerceOfferRule_Action) Reset() {
	*x = EcommerceOfferRule_Action{}
	mi := &file_ecommerce_offer_rules_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcommerceOfferRule_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcommerceOfferRule_Action) ProtoMessage() {}

func (x *EcommerceOfferRule_Action) ProtoReflect() protoreflect.Message {
	mi := &file_ecommerce_offer_rules_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcommerceOfferRule_Action.ProtoReflect.Descriptor instead.
func (*EcommerceOfferRule_Action) Descriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1, 1}
}

func (x *EcommerceOfferRule_Action) GetOutput() EcommerceOfferRule_Action_OutputField {
	if x != nil {
		return x.Output
	}
	return EcommerceOfferRule_Action_APPLY_DISCOUNT_PERCENT
}

func (x *EcommerceOfferRule_Action) GetValue() *RuleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents the operator to be used in the expression.
type EcommerceOfferRule_Condition_Expression struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Input         EcommerceOfferRule_Condition_InputField `protobuf:"varint,1,opt,name=input,proto3,enum=ecommerce.v1.rules.EcommerceOfferRule_Condition_InputField" json:"input,omitempty"`
	Operator      GRuleExpressionOperator                 `protobuf:"varint,2,opt,name=operator,proto3,enum=ecommerce.v1.rules.GRuleExpressionOperator" json:"operator,omitempty"`
	Value         *RuleValue                              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcommerceOfferRule_Condition_Expression) Reset() {
	*x = EcommerceOfferRule_Condition_Expression{}
	mi := &file_ecommerce_offer_rules_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcommerceOfferRule_Condition_Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcommerceOfferRule_Condition_Expression) ProtoMessage() {}

func (x *EcommerceOfferRule_Condition_Expression) ProtoReflect() protoreflect.Message {
	mi := &file_ecommerce_offer_rules_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcommerceOfferRule_Condition_Expression.ProtoReflect.Descriptor instead.
func (*EcommerceOfferRule_Condition_Expression) Descriptor() ([]byte, []int) {
	return file_ecommerce_offer_rules_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *EcommerceOfferRule_Condition_Expression) GetInput() EcommerceOfferRule_Condition_InputField {
	if x != nil {
		return x.Input
	}
	return EcommerceOfferRule_Condition_AGE
}

func (x *EcommerceOfferRule_Condition_Expression) GetOperator() GRuleExpressionOperator {
	if x != nil {
		return x.Operator
	}
	return GRuleExpressionOperator_EXPRESSION_OPERATOR_UNSPECIFIED
}

func (x *EcommerceOfferRule_Condition_Expression) GetValue() *RuleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var file_ecommerce_offer_rules_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1001,
		Name:          "ecommerce.v1.rules.grl_field_name",
		Tag:           "bytes,1001,opt,name=grl_field_name",
		Filename:      "ecommerce_offer_rules.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*FieldType)(nil),
		Field:         1002,
		Name:          "ecommerce.v1.rules.grl_field_type",
		Tag:           "varint,1002,opt,name=grl_field_type,enum=ecommerce.v1.rules.FieldType",
		Filename:      "ecommerce_offer_rules.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1003,
		Name:          "ecommerce.v1.rules.grl_operator",
		Tag:           "bytes,1003,opt,name=grl_operator",
		Filename:      "ecommerce_offer_rules.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional string grl_field_name = 1001;
	E_GrlFieldName = &file_ecommerce_offer_rules_proto_extTypes[0]
	// optional ecommerce.v1.rules.FieldType grl_field_type = 1002;
	E_GrlFieldType = &file_ecommerce_offer_rules_proto_extTypes[1]
	// optional string grl_operator = 1003;
	E_GrlOperator = &file_ecommerce_offer_rules_proto_extTypes[2]
)

var File_ecommerce_offer_rules_proto protoreflect.FileDescriptor

var file_ecommerce_offer_rules_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12,
	0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x1e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x11, 0x0a, 0x12, 0x45, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x52, 0x75, 0x6c, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xdf, 0x0a, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x47, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x16, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xdd, 0x01, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x47, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x07, 0x0a, 0x0a, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x03, 0x41, 0x47, 0x45,
	0x10, 0x00, 0x1a, 0x12, 0xca, 0x3e, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x41, 0x67, 0x65, 0xd0, 0x3e, 0x03, 0x12, 0x21, 0x0a, 0x06, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x10, 0x01, 0x1a, 0x15, 0xca, 0x3e, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0xd0, 0x3e, 0x01, 0x12, 0x25, 0x0a, 0x08, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x17, 0xca, 0x3e, 0x11, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd0, 0x3e, 0x01,
	0x12, 0x2a, 0x0a, 0x0b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x03, 0x1a, 0x19, 0xca, 0x3e, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd0, 0x3e, 0x01, 0x12, 0x44, 0x0a, 0x19,
	0x49, 0x53, 0x5f, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x25, 0xca, 0x3e, 0x1f,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0xd0,
	0x3e, 0x02, 0x12, 0x33, 0x0a, 0x14, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x19, 0xca, 0x3e,
	0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0xd0, 0x3e, 0x05, 0x12, 0x31, 0x0a, 0x0f, 0x41, 0x56, 0x47, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x06, 0x1a, 0x1c, 0xca, 0x3e,
	0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0xd0, 0x3e, 0x05, 0x12, 0x3e, 0x0a, 0x16, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53,
	0x5f, 0x41, 0x47, 0x4f, 0x10, 0x07, 0x1a, 0x22, 0xca, 0x3e, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x79, 0x73, 0x41, 0x67, 0x6f, 0xd0, 0x3e, 0x03, 0x12, 0x41, 0x0a, 0x17, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x53, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x24, 0xca, 0x3e, 0x1e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0xd0, 0x3e, 0x01, 0x12, 0x3c, 0x0a,
	0x14, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x09, 0x1a, 0x22, 0xca, 0x3e, 0x1c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0xd0, 0x3e, 0x07, 0x12, 0x28, 0x0a, 0x0a, 0x43,
	0x41, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x0a, 0x1a, 0x18, 0xca, 0x3e, 0x12,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0xd0, 0x3e, 0x05, 0x12, 0x43, 0x0a, 0x18, 0x43, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45,
	0x53, 0x10, 0x0b, 0x1a, 0x25, 0xca, 0x3e, 0x1f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0xd0, 0x3e, 0x07, 0x12, 0x3a, 0x0a, 0x13, 0x42, 0x52,
	0x4f, 0x57, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45,
	0x53, 0x10, 0x0c, 0x1a, 0x21, 0xca, 0x3e, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0xd0, 0x3e, 0x07, 0x12, 0x40, 0x0a, 0x1b, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30,
	0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x0d, 0x1a, 0x1f, 0xca, 0x3e, 0x19, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x33, 0x30, 0x64, 0xd0, 0x3e, 0x03, 0x12, 0x39, 0x0a, 0x13, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x0e, 0x1a, 0x20, 0xca, 0x3e, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0xd0, 0x3e, 0x05, 0x12, 0x46, 0x0a, 0x1a, 0x48, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52,
	0x45, 0x10, 0x0f, 0x1a, 0x26, 0xca, 0x3e, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0xd0, 0x3e, 0x02, 0x12, 0x31, 0x0a, 0x0f, 0x53,
	0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x41, 0x47, 0x4f, 0x10, 0x10,
	0x1a, 0x1c, 0xca, 0x3e, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x44, 0x61, 0x79, 0x73, 0x41, 0x67, 0x6f, 0xd0, 0x3e, 0x03, 0x1a, 0x8c,
	0x04, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf9, 0x02, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x3c, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x1a, 0x20, 0xca,
	0x3e, 0x1a, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0xd0, 0x3e, 0x05, 0x12,
	0x36, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x1d, 0xca, 0x3e, 0x17, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0xd0, 0x3e, 0x05, 0x12, 0x32, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x1a, 0x1b,
	0xca, 0x3e, 0x15, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd0, 0x3e, 0x01, 0x12, 0x2b, 0x0a, 0x0d, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x18,
	0xca, 0x3e, 0x12, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0xd0, 0x3e, 0x02, 0x12, 0x30, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04,
	0x1a, 0x18, 0xca, 0x3e, 0x12, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0xd0, 0x3e, 0x01, 0x12, 0x2b, 0x0a, 0x0d, 0x50, 0x52,
	0x4f, 0x4d, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x1a, 0x18, 0xca,
	0x3e, 0x12, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0xd0, 0x3e, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x5f, 0x4c,
	0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x06, 0x1a,
	0x1c, 0xca, 0x3e, 0x16, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0xd0, 0x3e, 0x03, 0x2a, 0x7c, 0x0a,
	0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x2a, 0x98, 0x01, 0x0a, 0x09,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x56, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x5f, 0x56,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x10, 0x07, 0x2a, 0xb6, 0x02, 0x0a, 0x17, 0x47, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x1f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x10, 0xda, 0x3e, 0x0d, 0x20, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x12, 0x15, 0x0a, 0x09, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x1a, 0x06, 0xda, 0x3e, 0x03, 0x20, 0x3c, 0x20,
	0x12, 0x1d, 0x0a, 0x10, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x1a, 0x07, 0xda, 0x3e, 0x04, 0x20, 0x3c, 0x3d, 0x20, 0x12,
	0x18, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10,
	0x03, 0x1a, 0x06, 0xda, 0x3e, 0x03, 0x20, 0x3e, 0x20, 0x12, 0x20, 0x0a, 0x13, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x04, 0x1a, 0x07, 0xda, 0x3e, 0x04, 0x20, 0x3e, 0x3d, 0x20, 0x12, 0x13, 0x0a, 0x06, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x1a, 0x07, 0xda, 0x3e, 0x04, 0x20, 0x3d, 0x3d, 0x20,
	0x12, 0x17, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x06,
	0x1a, 0x07, 0xda, 0x3e, 0x04, 0x20, 0x21, 0x3d, 0x20, 0x12, 0x44, 0x0a, 0x15, 0x48, 0x41, 0x53,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x1a, 0x29, 0xda, 0x3e, 0x26, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x28, 0x3a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x3a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x29, 0x2a,
	0x67, 0x0a, 0x11, 0x47, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x19, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x1a, 0x10, 0xda, 0x3e, 0x0d, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x07,
	0xda, 0x3e, 0x04, 0x20, 0x26, 0x26, 0x20, 0x12, 0x0f, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02, 0x1a,
	0x07, 0xda, 0x3e, 0x04, 0x20, 0x7c, 0x7c, 0x20, 0x3a, 0x48, 0x0a, 0x0e, 0x67, 0x72, 0x6c, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x3a, 0x67, 0x0a, 0x0e, 0x67, 0x72, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x67,
	0x72, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x45, 0x0a, 0x0c, 0x67,
	0x72, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x64, 0x73, 0x6c, 0x3b, 0x64, 0x73, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ecommerce_offer_rules_proto_rawDescOnce sync.Once
	file_ecommerce_offer_rules_proto_rawDescData []byte
)

func file_ecommerce_offer_rules_proto_rawDescGZIP() []byte {
	file_ecommerce_offer_rules_proto_rawDescOnce.Do(func() {
		file_ecommerce_offer_rules_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ecommerce_offer_rules_proto_rawDesc), len(file_ecommerce_offer_rules_proto_rawDesc)))
	})
	return file_ecommerce_offer_rules_proto_rawDescData
}

var file_ecommerce_offer_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ecommerce_offer_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ecommerce_offer_rules_proto_goTypes = []any{
	(FieldType)(0),                                  // 0: ecommerce.v1.rules.FieldType
	(ValueType)(0),                                  // 1: ecommerce.v1.rules.ValueType
	(GRuleExpressionOperator)(0),                    // 2: ecommerce.v1.rules.GRuleExpressionOperator
	(GRuleJoinOperator)(0),                          // 3: ecommerce.v1.rules.GRuleJoinOperator
	(EcommerceOfferRule_Condition_InputField)(0),    // 4: ecommerce.v1.rules.EcommerceOfferRule.Condition.InputField
	(EcommerceOfferRule_Action_OutputField)(0),      // 5: ecommerce.v1.rules.EcommerceOfferRule.Action.OutputField
	(*RuleValue)(nil),                               // 6: ecommerce.v1.rules.RuleValue
	(*EcommerceOfferRule)(nil),                      // 7: ecommerce.v1.rules.EcommerceOfferRule
	(*EcommerceOfferRule_Condition)(nil),            // 8: ecommerce.v1.rules.EcommerceOfferRule.Condition
	(*EcommerceOfferRule_Action)(nil),               // 9: ecommerce.v1.rules.EcommerceOfferRule.Action
	(*EcommerceOfferRule_Condition_Expression)(nil), // 10: ecommerce.v1.rules.EcommerceOfferRule.Condition.Expression
	(*descriptorpb.EnumValueOptions)(nil),           // 11: google.protobuf.EnumValueOptions
}
var file_ecommerce_offer_rules_proto_depIdxs = []int32{
	8,  // 0: ecommerce.v1.rules.EcommerceOfferRule.conditions:type_name -> ecommerce.v1.rules.EcommerceOfferRule.Condition
	3,  // 1: ecommerce.v1.rules.EcommerceOfferRule.condition_join_operator:type_name -> ecommerce.v1.rules.GRuleJoinOperator
	9,  // 2: ecommerce.v1.rules.EcommerceOfferRule.actions:type_name -> ecommerce.v1.rules.EcommerceOfferRule.Action
	10, // 3: ecommerce.v1.rules.EcommerceOfferRule.Condition.expressions:type_name -> ecommerce.v1.rules.EcommerceOfferRule.Condition.Expression
	3,  // 4: ecommerce.v1.rules.EcommerceOfferRule.Condition.expression_join_operator:type_name -> ecommerce.v1.rules.GRuleJoinOperator
	5,  // 5: ecommerce.v1.rules.EcommerceOfferRule.Action.output:type_name -> ecommerce.v1.rules.EcommerceOfferRule.Action.OutputField
	6,  // 6: ecommerce.v1.rules.EcommerceOfferRule.Action.value:type_name -> ecommerce.v1.rules.RuleValue
	4,  // 7: ecommerce.v1.rules.EcommerceOfferRule.Condition.Expression.input:type_name -> ecommerce.v1.rules.EcommerceOfferRule.Condition.InputField
	2,  // 8: ecommerce.v1.rules.EcommerceOfferRule.Condition.Expression.operator:type_name -> ecommerce.v1.rules.GRuleExpressionOperator
	6,  // 9: ecommerce.v1.rules.EcommerceOfferRule.Condition.Expression.value:type_name -> ecommerce.v1.rules.RuleValue
	11, // 10: ecommerce.v1.rules.grl_field_name:extendee -> google.protobuf.EnumValueOptions
	11, // 11: ecommerce.v1.rules.grl_field_type:extendee -> google.protobuf.EnumValueOptions
	11, // 12: ecommerce.v1.rules.grl_operator:extendee -> google.protobuf.EnumValueOptions
	0,  // 13: ecommerce.v1.rules.grl_field_type:type_name -> ecommerce.v1.rules.FieldType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	13, // [13:14] is the sub-list for extension type_name
	10, // [10:13] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ecommerce_offer_rules_proto_init() }
func file_ecommerce_offer_rules_proto_init() {
	if File_ecommerce_offer_rules_proto != nil {
		return
	}
	file_ecommerce_offer_rules_proto_msgTypes[0].OneofWrappers = []any{
		(*RuleValue_StringVal)(nil),
		(*RuleValue_BoolVal)(nil),
		(*RuleValue_IntVal)(nil),
		(*RuleValue_FloatVal)(nil),
		(*RuleValue_StringListCommaConcatenated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ecommerce_offer_rules_proto_rawDesc), len(file_ecommerce_offer_rules_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   5,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_ecommerce_offer_rules_proto_goTypes,
		DependencyIndexes: file_ecommerce_offer_rules_proto_depIdxs,
		EnumInfos:         file_ecommerce_offer_rules_proto_enumTypes,
		MessageInfos:      file_ecommerce_offer_rules_proto_msgTypes,
		ExtensionInfos:    file_ecommerce_offer_rules_proto_extTypes,
	}.Build()
	File_ecommerce_offer_rules_proto = out.File
	file_ecommerce_offer_rules_proto_goTypes = nil
	file_ecommerce_offer_rules_proto_depIdxs = nil
}
